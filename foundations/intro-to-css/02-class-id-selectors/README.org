# -*- auto-fill-function: nil; eval: (add-hook 'after-save-hook 'org-babel-tangle nil t); -*-

* Class and ID Selectors
  :PROPERTIES:
  :CUSTOM_ID: class-and-id-selectors
  :END:
Knowing how to add class and ID attributes to HTML elements, as well as
use their respective selectors, is invaluable. It's important to
practice using them.

There are several elements in the HTML file provided, which you will
have to add either class or ID attributes to, as noted in the outcome
image below.

- Me: Ok, the elements are in =index.html=.
  Let's start by preparing the tangle, so we can modify it here.

  [[file:index.html][index.html]] ≡

  #+begin_src html :tangle index.html
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Class and ID Selectors</title>
      <link rel="stylesheet" href="style.css">
    </head>
    <body>
      <<Number 1>>
      <div>Number 2 - I'm one ID.</div>
      <<Number 3>>
      <div>Number 4 - I'm another ID.</div>
      <<Number 5>>
    </body>
  </html>
  #+end_src

  Then we add either a class or an ID for each element.
  At this point, it's convenient to analyze the expected output to see if we can minimize the number of classes and IDs necessary.

  Observations:
  - Numbers 1, 3, and 5 share almost all the property values, except for Number 3's font-size.
    They could *share* a class, and we could style Number 3's font-size *inline*.
  - Numbers 2 and 4 share only the *font-family*.
    They could share a class with *that property*, but the other ones will need to use the ID selector.

  | Number | background-color | color | font-size | font-weight | font-family                        |
  |--------+------------------+-------+-----------+-------------+------------------------------------|
  |      1 | ffa7a7           | black | X         | normal      | Verdana, "DejaVu Sans", sans-serif |
  |      3 | ffa7a7           | black | 24px      | normal      | Verdana, "DejaVu Sans", sans-serif |
  |      5 | ffa7a7           | black | X         | normal      | Verdana, "DejaVu Sans", sans-serif |
  |      2 | white            | blue  | 36px      | normal      | serif                              |
  |      4 | 80ff80           | black | 24px      | bold        | serif                              |

  Let's use this knowledge to apply a class to each odd number, and an attribute to one of them.

  ~<<Number 1>> +≡~

  #+begin_src html :noweb-ref Number 1
  <p>Number 1 - I'm a class!</p>
  #+end_src

  For the font-size, I estimated it using an image editor.

  ~<<Number 3>> +≡~

  #+begin_src html :noweb-ref Number 3
  <p>Number 3 - I'm a class, but cooler!</p>
  #+end_src

  ~<<Number 5>> +≡~

  #+begin_src html :noweb-ref Number 5
  <p>Number 5 - I'm a class!</p>
  #+end_src

  Now, let's create the ~odd~ CSS declaration block.
  I should be inside =style.css=; let's tangle it with the original contents, and a placeholder for the declaration blocks.

  [[file:style.css][style.css]] ≡

  #+begin_src css :tangle style.css
  /* Add CSS Styling */
  <<Declaration Blocks>>
  #+end_src

  Now we add the declaration block for the class ~odd~.

  ~<<Declaration Blocks>> +≡~

  #+begin_src css :noweb-ref Declaration Blocks
  <<odd Declaration Block>>
  #+end_src

  Then we add a code block for the declarations themselves.
  As the selector is a /class/, we prefix it with a dot.

  ~<<odd Declaration Block>> +≡~

  #+begin_src css :noweb-ref odd Declaration Block
  .odd {
    <<odd Declarations>>
  }
  #+end_src

  Now the declarations themselves, one by one to make sure we get it right.

  ~<<odd Declarations>> +≡~

  #+begin_src css :noweb-ref odd Declarations

  #+end_src

You will then have to add rules in the CSS file provided using the correct selector syntax.
Look over the outcome image carefully, and try to keep in mind which elements look similarly styled (classes), which ones may be completely unique from the rest (ID), and which ones have slight variations from others (multiple classes).

It isn't entirely important which class or ID values you use, as the focus here is on being able to add the attributes and use the correct selector syntax to style elements.
For the colors in this exercise, try using a non-keyword value (RGB, HEX, or HSL).
The properties you need to add to each element are:

- *All odd numbered elements*: a light red/pink background, and a list of fonts containing =Verdana= and =DejaVu Sans= with =sans-serif= as a fallback
- *The second element*: blue text and a font size of 36px
- *The third element*: in addition to the styles for all odd numbered elements, add a font size of 24px
- *The fourth element*: a light green background, a font size of 24px, and bold

Quick tip: in VS Code, you can change which format colors are displayed in RGB, HEX, or HSL by hovering over the color value in the CSS and clicking the top of the popup that appears!

#+begin_quote
  *** Note:
      :PROPERTIES:
      :CUSTOM_ID: note
      :END:
  Part of your task is to add a font to /some/ of these items. Your
  browser's font's might be different than the one displayed in the
  desired outcome image. As long as you confirm that the fonts /are/
  being applied to the right lines any differences are okay for this
  exercise.
#+end_quote

** Desired Outcome
   :PROPERTIES:
   :CUSTOM_ID: desired-outcome
   :END:
#+caption: desired outcome
[[./desired-outcome.png]]

*** Self Check
    :PROPERTIES:
    :CUSTOM_ID: self-check
    :END:
- Do the odd numbered =p= elements share a class?
- Do the even numbered =div= elements have unique IDs?
- Does the Number 3 element have multiple classes?
